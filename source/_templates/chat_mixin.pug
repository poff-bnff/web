
mixin chat(room_name)
    #chat-container-r5d.chat-container
        script(src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js')
        #chat-message-template-r5d.chat-message(style='display:none')
        #chat-main-r5d.chat-main
            #chat-sidebar-r5d.chat-sidebar
                h2#chat-room-name-r5d Viie uksega tuba
                ul#chat-user-list-r5d
            #chat-messages-r5d.chat-messages

        #chat-form-container-r5d.chat-form-container
            form#chat-form-r5d
                input#chat-message-input-r5d.chat-message-input(type='text' placeholder='Enter Message' required='' autocomplete='off')
                button.btn
                    i.chat-message-button
                    | Send


    style.

        :root {
            --dark-color-a: #949494;
            --dark-color-b: #808080;
            --light-color: #e6e9ff;
            --success-color: #5cb85c;
            --error-color: #d9534f;
            --background-color: #f5f5f5;
        }
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        .main-chat-container,
        .moderated-chat-container{
            background: var(--background-color);

        }

        }


        body {
        }

        ul {
            list-style: none;
        }

        a {
            text-decoration: none;
        }

        .btn {
            cursor: pointer;
            padding: 5px 15px;
            background: var(--light-color);
            color: var(--dark-color-a);
            border: 0;
            font-size: 17px;
        }

        /* Chat Page */

        .chat-container {
            max-width: 90%;
            margin: 30px auto;
            overflow: hidden;
        }

        .chat-header {
            background: var(--dark-color-a);
            color: #fff;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
            padding: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-main {
            display: grid;
            grid-template-columns: 1fr 3fr;
        }

        .chat-sidebar {
            background: var(--dark-color-b);
            color: #fff;
            padding: 20px 20px 60px;
            overflow-y: scroll;
        }

        .chat-sidebar h2 {
            font-size: 20px;
            background: rgba(0, 0, 0, 0.1);
            padding: 10px;
            margin-bottom: 20px;
        }

        .chat-sidebar h3 {
            margin-bottom: 15px;
        }

        .chat-sidebar ul li {
            padding: 10px 0;
        }

        .chat-messages {
            padding: 30px;
            max-height: 500px;
            overflow-y: scroll;
        }

        .chat-messages .message {
            padding: 10px;
            margin-bottom: 15px;
            background-color: var(--light-color);
            border-radius: 5px;
            overflow-wrap: break-word;
        }

        .chat-messages .message .meta {
            font-size: 15px;
            font-weight: bold;
            color: var(--dark-color-b);
            opacity: 0.7;
            margin-bottom: 7px;
        }

        .chat-messages .message .meta span {
            color: #777;
        }

        .chat-form-container {
            padding: 20px 30px;
            background-color: var(--dark-color-a);
        }

        .chat-form-container form {
            display: flex;
        }

        .chat-form-container input[type='text'] {
            font-size: 16px;
            padding: 5px;
            height: 40px;
            flex: 1;
        }

        @media (max-width: 700px) {
            .chat-main {
                display: block;
            }

            .chat-sidebar {
                display: none;
            }
        }


    script(src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js")
    script.
        const outputRoomName = '#{outputRoomName}'
        const outputRoomName_mod = '#{outputRoomName}' + '-mod'

        document.addEventListener('userProfileLoaded', function (e) {
            main(userProfile, room_name)
        })
        const is_moderator = true

        function main(userProfile) {
            const chat_form = document.getElementById('chat-form')
            const chat_form_mod = document.getElementById('chat-form-mod')
            const chat_messages = document.querySelector('.chat-messages')
            const mod_chat_messages = document.querySelector('.mod-chat-messages')
            const room_name = document.getElementById('room-name')
            const room_name_mod = document.getElementById('room-name-mod')
            const user_list = document.getElementById('users')
            const user_list_mod = document.getElementById('users-mod')

            // Get username and room from URL
            //- const acre = 'moderator'

            socket = io('http://192.241.148.13'); // In case your front is not served from the same domain as your server, you have to pass the URL of your server.

            // Join chatroom
            socket.emit('joinRoom', { userProfile: userProfile, room: outputRoomName })

            // Get outputRoomName and users
            socket.on('roomUsers', (room_users) => {
                setOutputRoomName(room_name, room_users.room)
                setOutputUsers(room_users.users)
            });

            // Message from server
            socket.on('message', message => {
                console.log(message)
                outputMessage(message)

                // Scroll down
                chat_messages.scrollTop = chat_messages.scrollHeight
            });


            ///MODERATED
            modSocket = io('http://192.241.148.13'); // In case your front is not served from the same domain as your server, you have to pass the URL of your server.

            // Join chatroom
            modSocket.emit('joinRoom', { userProfile: userProfile, room: outputRoomName_mod })

            // Get outputRoomName and users
            modSocket.on('roomUsers', (room_users) => {
                setOutputRoomName(room_name_mod, room_users.room)
                //- setOutputUsers([])
            });

            // Message from server
            modSocket.on('message', message => {
                console.log(message)
                outputMessage(message)

                // Scroll down
                chat_messages.scrollTop = chat_messages.scrollHeight
            });


            //- let id = 0                // Message submit
            chat_form.addEventListener('submit', e => {
                e.preventDefault()

                // Get message text
                let msg = e.target.elements.msg.value
                msg = msg.trim()

                if (!msg){
                    return false
                }

                // Emit message to server
                socket.emit('chatMessage', {msg, outputRoomName, userProfile})

                // Clear input
                e.target.elements.msg.value = ''
                e.target.elements.msg.focus()
            })

            chat_form_mod.addEventListener('submit', e => {
                e.preventDefault()

                // Get message text
                let msg = e.target.elements.msg.value
                msg = msg.trim()

                if (!msg){
                    return false
                }

                // Emit message to server
                modSocket.emit('chatMessage', {msg, outputRoomName_mod, userProfile})

                // Clear input
                e.target.elements.msg.value = ''
                e.target.elements.msg.focus()
            })

            // Message select for modretor

            // Output message to DOM
            function outputMessage(message) {

                const div = document.createElement('div')
                div.classList.add('message')

                const p = document.createElement('p')
                p.classList.add('meta')
                p.innerText = message.username
                p.innerHTML += `<span>${message.time} UTC </span>`
                div.appendChild(p)

                const para = document.createElement('p')
                para.classList.add('text')
                para.innerText = message.text
                div.appendChild(para)

                document.querySelector('.chat-messages').appendChild(div)
            }

            // Add outputRoomName name to DOM
            function setOutputRoomName(room, name) {
                room.innerText = name;
            }

            //- // Add outputRoomName name to DOM
            //- function setOutputRoomName(outputRoomName_mod) {
            //-     room_name_mod.innerText = outputRoomName_mod;
            //- }

            // Add users to DOM
            function setOutputUsers(users) {
                user_list.innerHTML = ''
                users.forEach(user=>{
                    const li = document.createElement('li')
                    console.log(user)
                    li.innerText = user.name
                    user_list.appendChild(li)
                });
            }

        }
