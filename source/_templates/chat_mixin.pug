
mixin chat(room_name, is_moderated=false)

    - var room_suffix = ''
    if is_moderated
        pre ongi modereeritud
        - console.log('is_moderated')
        - room_suffix = '-moderated'
    else
        pre polegi mod

    div(id='chat-container-' + room_name + room_suffix class='chat-container')
        script(src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js')
        div(id='chat-message-template-' + room_name + room_suffix class='chat-message' style='display:none')
        div(id='chat-main-' + room_name + room_suffix class='chat-main')
            div(id='chat-sidebar-' + room_name + room_suffix  class='chat-sidebar')
                h2(id='chat-room-name-'+ room_name + room_suffix)
                ul(id='chat-user-list-'+ room_name + room_suffix)
            div(id='chat-messages-'+ room_name + room_suffix class='chat-messages')

        div(id='chat-form-container-'+ room_name + room_suffix class='chat-form-container')
            form(id='chat-form-' + room_name + room_suffix)
                input(id='chat-message-input-' + room_name + room_suffix class='chat-message-input' type='text' placeholder='Enter Message' required='' autocomplete='off')
                button.btn
                    i.chat-message-button
                    | Send


    style.

        :root {
            --dark-color-a: #949494;
            --dark-color-b: #808080;
            --light-color: #e6e9ff;
            --success-color: #5cb85c;
            --error-color: #d9534f;
            --background-color: #adadb3;
        }
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        .main-chat-container,
        .moderated-chat-container{
            background: var(--background-color);

        }

        body {
        }

        ul {
            list-style: none;
        }

        a {
            text-decoration: none;
        }

        .btn {
            cursor: pointer;
            padding: 5px 15px;
            background: var(--light-color);
            color: var(--dark-color-a);
            border: 0;
            font-size: 17px;
        }

        /* Chat Page */

        .chat-container {
            max-width: 90%;
            margin: 30px auto;
            overflow: hidden;
        }

        .chat-header {
            background: var(--dark-color-a);
            color: #fff;
            border-top-left-radius: 5px;
            border-top-right-radius: 5px;
            padding: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-main {
            display: grid;
            grid-template-columns: 1fr 3fr;
        }

        .chat-sidebar {
            background: var(--dark-color-b);
            color: #fff;
            padding: 20px 20px 60px;
            overflow-y: scroll;
        }

        .chat-sidebar h2 {
            font-size: 20px;
            background: rgba(0, 0, 0, 0.1);
            padding: 10px;
            margin-bottom: 20px;
        }

        .chat-sidebar h3 {
            margin-bottom: 15px;
        }

        .chat-sidebar ul li {
            padding: 10px 0;
        }

        .chat-messages {
            padding: 30px;
            max-height: 500px;
            overflow-y: scroll;
            background-color: var(--light-color);
            color: black;
        }

        .chat-messages .message {
            padding: 10px;
            margin-bottom: 15px;
            background-color: var(--background-color);
            border-radius: 5px;
            overflow-wrap: break-word;
        }

        .chat-messages .message .meta {
            font-size: 15px;
            font-weight: bold;
            color: var(--dark-color-b);
            opacity: 0.7;
            margin-bottom: 7px;
        }

        .chat-messages .message .meta span {
            color: #777;
        }

        .chat-form-container {
            padding: 20px 30px;
            background-color: var(--dark-color-a);
        }

        .chat-form-container form {
            display: flex;
        }

        .chat-form-container input[type='text'] {
            font-size: 16px;
            padding: 5px;
            height: 40px;
            flex: 1;
        }

        @media (max-width: 700px) {
            .chat-main {
                display: block;
            }

            .chat-sidebar {
                display: none;
            }
        }


    script(src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js")
    script.


        document.addEventListener('userProfileLoaded', function (e) {
            main(userProfile, '#{room_name}', #{is_moderated})
        })

        function main(userProfile, room_name, is_moderated) {

            let room_suffix = ''
            if (is_moderated) {
                room_suffix = '-moderated'
            }

            const CHAT_SERVER = 'http://192.241.148.13'
            const socket = io(CHAT_SERVER)

            const chatFormElement = document.getElementById(['chat-form', room_name + room_suffix].join('-'))
            const chatMessagesElement = document.getElementById(['chat-messages', room_name + room_suffix].join('-'))
            const roomNameElement = document.getElementById(['chat-room-name', room_name + room_suffix].join('-'))
            const userListElement = document.getElementById(['chat-user-list', room_name + room_suffix].join('-'))
            const messageInputElement = document.getElementById(['chat-message-input', room_name + room_suffix].join('-'))
            const messageTemplateElement = document.getElementById(['chat-message-template', room_name + room_suffix].join('-'))

            console.log(roomNameElement)
            console.log(userListElement)
            roomNameElement.innerText = room_name

            // Join chatroom
            socket.emit('joinRoom', {
                user_id: userProfile.sub,
                user_name: userProfile.name,
                room_name: room_name,
                is_moderated: is_moderated,
                userProfile: userProfile
            })

            socket.on('roomUsers', (users) => {
                setUserList(users.users)
            })
            // Add users to DOM
            function setUserList(users) {
                userListElement.innerHTML = ''
                users.forEach(user => {
                    const li = document.createElement('li')
                    li.innerText = user
                    userListElement.appendChild(li)
                })
            }

            socket.on('messageToClient', (message) => {
                console.log('Got message:', message)
                outputMessage(message)
                // Scroll down
                chatMessagesElement.scrollTop = chatMessagesElement.scrollHeight
            })

            // Message submit

            chatFormElement.addEventListener('submit', e => {
                e.preventDefault()

                // Get message text
                let message_text = messageInputElement.value.trim()
                if (!message_text) {
                    return false
                }

                // Emit message to server
                console.log('Send message', message_text)
                socket.emit('messageToServer', {
                    user_id: userProfile.sub,
                    room_name: room_name,
                    message: message_text
                })

                // Clear input
                messageInputElement.value = ''
                messageInputElement.focus()
            })


            // Output message to DOM
            function outputMessage(message) {

                var messageElement = messageTemplateElement.cloneNode(true)
                messageElement.id = ''
                messageElement.style.display = 'block'
                const messageMetaElement = document.createElement('div')
                messageMetaElement.innerText = message.user_name + ' ' + message.time
                const messageTextElement = document.createElement('span')
                messageTextElement.innerText = message.text
                const moderateButtonElement = document.createElement('button')
                moderateButtonElement.innerText = "send to moderated"

                chatMessagesElement.appendChild(messageElement)
                messageElement.appendChild(messageMetaElement)
                messageMetaElement.appendChild(messageTextElement)

                moderateButtonElement.onclick = function() {moderateMessage(message.id)}
                messageMetaElement.appendChild(moderateButtonElement)

            }

            function moderateMessage(id){
                console.log("modereeri messsage id-ga: ", id)
                socket.emit('moderate', {
                    message_id: id,
                })
            }


        }
