extends /_templates/layout.pug
include /_templates/mixins.pug

block content

    br
    br
    br
    br
    br
    h4#number Log in without hosted UI:
    label(style={color: 'red'} for='loginUsername') Username:
    input#loginUsername(type='text')
    br
    label(style={color: 'red'} for='loginPassword') Password:
    input#loginPassword(type='password')
    br
    a(href='https://pfftestdom1.auth.eu-central-1.amazoncognito.com/oauth2/authorize?response_type=code&client_id=1h2sd5s0l7s75qi2dfeku57lls&redirect_uri=https://dev.inscaping.eu/login/&identity_provider=Facebook') Facebook
    br
    a(href='https://pfftestdom1.auth.eu-central-1.amazoncognito.com/oauth2/authorize?response_type=code&client_id=1h2sd5s0l7s75qi2dfeku57lls&redirect_uri=https://dev.inscaping.eu/login/&identity_provider=Google') Google
    br
    button(onclick='login()') Login
    br
    br
    br
    a(href='https://pfftestdom1.auth.eu-central-1.amazoncognito.com/logout?client_id=1h2sd5s0l7s75qi2dfeku57lls&logout_uri=https://dev.inscaping.eu/login/' onclick='logOut()')#logOutLink Log out
    br
    br
    h1#hello
    p#favoritefilm(style={color: 'green'})
    br
    a(href='https://pfftestdom1.auth.eu-central-1.amazoncognito.com/login?client_id=1h2sd5s0l7s75qi2dfeku57lls&response_type=code&scope=openid+profile&redirect_uri=https://dev.inscaping.eu/login/') (Log in via hosted UI)
    br
    br
    button(onclick='loadCognitoUser()') Say Hello to Cognito user via token+userInfo request
    br
    br
    br
    button(onclick='showUserInfo()') Show user info



    style.
        h1 {color: #464646}
        h4 {color: #464646}


    script.
        var url = window.location;
        const ACCESS_TOKEN = "ACCESS_TOKEN";
        const REFRESH_TOKEN = "REFRESH_TOKEN";
        const ID_TOKEN = "ID_TOKEN";

        if (localStorage.getItem('ID_TOKEN')){
            hello.innerHTML = 'Hello, ' + name;
            favoritefilm.innerHTML = '<button onclick="addFavoriteFilm()">Add film to favorites</button>';

        } else {
            hello.innerHTML = 'Not logged in'
        }

        var code = new URLSearchParams(url.search).get('code')
        console.log(code);
        if (code) {
            //- getReplyFromAWS(code);
            loginWithCode(code)
            console.log('Code sent: ' + code);
        } else {
            console.log('Not sent ')
        }



        async function loginWithCode(code) {

            var myHeaders = new Headers();

            myHeaders.append("Content-Type", "application/x-www-form-urlencoded");
            myHeaders.append("Authorization", "Basic MTlucjlqNXZqaGM2dDRuOWdhaWM0bXRjcTM6MTluYzdiOWVlYnMzbmg4NGowajV1cG92b2I3c2djbDJqcWRma2NibDdybTc2YXM5bWV1");
            myHeaders.append("Cookie", "XSRF-TOKEN=e7ac0bb5-d5b1-4e39-8692-2fb0600fbb64");

            var urlencoded = new URLSearchParams();
            urlencoded.append("grant_type", "authorization_code");
            urlencoded.append("redirect_uri", "https://dev.inscaping.eu/login/");
            urlencoded.append("code", code);

            var requestOptions = {
                method: 'POST',
                headers: myHeaders,
                body: urlencoded,
                redirect: 'follow'
            };

            await fetch("https://pfftestdom1.auth.eu-central-1.amazoncognito.com/oauth2/token", requestOptions)
                .then(response => response.text())
                .then(result => {
                    //- console.log(result);
                    const JSONresult = JSON.parse(result);
                    console.log(JSONresult.access_token);
                    if (JSONresult.access_token && JSONresult.refresh_token) {
                        storeAuthentication(JSONresult);
                    }
                })
                .catch(error => console.log('error', error));
        }


        async function storeAuthentication(JSONresult) {
            localStorage.setItem(ACCESS_TOKEN, JSONresult.access_token);
            localStorage.setItem(REFRESH_TOKEN, JSONresult.refresh_token);
            localStorage.setItem(ID_TOKEN, JSONresult.id_token);
            await loadInfoFromIdtkn();
            location.reload();
        }

        function getAccessToken() {
            token.innerHTML = localStorage.getItem(`ACCESS_TOKEN`);
            return localStorage.getItem(`ACCESS_TOKEN`);
        }

        function logOut() {
            localStorage.removeItem(ACCESS_TOKEN);
            localStorage.removeItem(REFRESH_TOKEN);
            localStorage.removeItem(ID_TOKEN);
            console.log('LOGITUD VÃ„LJA');
            location.reload();
        }







        async function loadCognitoUser(){
            console.log(localStorage.getItem(ACCESS_TOKEN));
            var myHeaders = new Headers();

            myHeaders.append('Authorization', `Bearer ${localStorage.getItem(ACCESS_TOKEN)}`);

            var requestOptions = {
                method: 'GET',
                headers: myHeaders,
                redirect: 'follow'
            };

            console.log(requestOptions.headers);

            await fetch("https://pfftestdom1.auth.eu-central-1.amazoncognito.com/oauth2/userInfo", requestOptions)
                .then(response => response.text())
                .then(result => {
                    console.log(result);
                    const JSONresult = JSON.parse(result);
                    console.log(JSONresult.name);
                    hello.innerHTML = 'Hello1, ' + JSONresult.name + '(token+userInfo request)';
                })
                .catch(error => console.log('error', error));
        }




        async function login(){

            let loginUsername = document.getElementById('loginUsername').value;
            let loginPassword = document.getElementById('loginPassword').value;


        // Amazon Cognito creates a session which includes the id, access, and refresh tokens of an authenticated user.

            var authenticationData = {
                    Username : loginUsername,
                    Password : loginPassword
            };

            var authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);
            var poolData = {
                    UserPoolId : 'eu-central-1_ockBtdcsP',
                    ClientId : '1h2sd5s0l7s75qi2dfeku57lls'
            };

            var userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);
            var userData = {
                    Username : loginUsername,
                    Pool : userPool
            };

            var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
            cognitoUser.authenticateUser(authenticationDetails, {
                onSuccess: async function (result) {
                    //- var accessToken = result.getAccessToken().getJwtToken();
                    localStorage.setItem('ACCESS_TOKEN', result.accessToken.jwtToken);
                    localStorage.setItem('REFRESH_TOKEN', result.refreshToken.token);
                    localStorage.setItem('ID_TOKEN', result.idToken.jwtToken);
                    await loadInfoFromIdtkn();
                    location.reload();

                    /* Use the idToken for Logins Map when Federating User Pools with identity pools or when passing through an Authorization Header to an API Gateway Authorizer */
                    var idToken = result.idToken.jwtToken;

                },

                onFailure: function(err) {
                    alert(JSON.stringify(err));
                },
            });
        }


        function showUserInfo(){

            var cognitoidentityserviceprovider = new AWS.CognitoIdentityServiceProvider({region: 'us-east-2'});

            var params = {
                AccessToken: localStorage.getItem('ACCESS_TOKEN') /* required */
            };
            cognitoidentityserviceprovider.getUser(params, function(err, data) {
                if (err) console.log(err, err.stack); // an error occurred
            else     console.log(data);           // successful response
            });
        }


        async function loadInfoFromIdtkn(){
            console.log('loadInfoFromIdtk');
            let response = await fetch(`https://rud4xujjle.execute-api.eu-north-1.amazonaws.com/dev/tkns`, {
                    method: 'GET',
                    headers: {
                        Authorization: 'Bearer ' + localStorage.getItem('ID_TOKEN')}

                });
                let name1 = await response.json();
                name = name1.message;
                //- hello.innerHTML = 'Hello, ' + name.message;
                //- return await response.json();
                //- return processJsonResponse(response);
        }


        async function addFavoriteFilm(){
            console.log('addFavoriteFilm');

            let favoriteEntry = {
                user: 'test123',
                film: 'funnyFilm'
            }


            let response = await fetch(`https://2uz8lf2cf6.execute-api.eu-north-1.amazonaws.com/dev/hello-world`, {
                    method: 'POST',
                    headers: {
                        Authorization: 'Bearer ' + localStorage.getItem('ID_TOKEN')},
                        body: JSON.stringify(favoriteEntry)
                        //- body: JSON.stringify(data)
                });
                console.log(await response.json());
        }







    //- async function getReplyFromAWS(code) {
            //-     let response = await fetch(`https://9t1wskosmj.execute-api.eu-central-1.amazonaws.com/default/POFF-Validate`, {
            //-         method: 'POST',
            //-         //- headers: {Authorization: 'Bearer ' + accessToken}
            //-         body: code
            //-     });
            //-     return await response.json();
            //-     //- return processJsonResponse(response);
            //- }














